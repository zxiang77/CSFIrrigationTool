// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable max-len */

// Utilities
export { assembleShaders } from './shader-utils';

// Lib
export { Layer, CompositeLayer, LayerManager, AttributeManager } from './lib';
export { COORDINATE_SYSTEM } from './lib';
// Viewports
export { default as Viewport } from './lib/viewports/viewport';
export { default as PerspectiveViewport } from './lib/viewports/perspective-viewport';
export { default as OrthographicViewport } from './lib/viewports/orthographic-viewport';
export { default as WebMercatorViewport } from './lib/viewports/web-mercator-viewport';

// Core Layers
export { default as ArcLayer } from './layers/core/arc-layer/arc-layer';
export { default as IconLayer } from './layers/core/icon-layer/icon-layer';
export { default as LineLayer } from './layers/core/line-layer/line-layer';
export { default as PointCloudLayer } from './layers/core/point-cloud-layer/point-cloud-layer';
export { default as ScatterplotLayer } from './layers/core/scatterplot-layer/scatterplot-layer';

export { default as ScreenGridLayer } from './layers/core/screen-grid-layer/screen-grid-layer';
export { default as GridLayer } from './layers/core/grid-layer/grid-layer';
export { default as GridCellLayer } from './layers/core/grid-cell-layer/grid-cell-layer';

export { default as HexagonLayer } from './layers/core/hexagon-layer/hexagon-layer';
export { default as HexagonCellLayer } from './layers/core/hexagon-cell-layer/hexagon-cell-layer';

export { default as PathLayer } from './layers/core/path-layer/path-layer';
export { default as PolygonLayer } from './layers/core/polygon-layer/polygon-layer';
export { default as GeoJsonLayer } from './layers/core/geojson-layer/geojson-layer';

// Deprecated Layers
export { default as ChoroplethLayer } from './layers/deprecated/choropleth-layer/choropleth-layer';
export { default as ChoroplethLayer64 } from './layers/deprecated/choropleth-layer-64/choropleth-layer-64';
export { default as ExtrudedChoroplethLayer64 } from './layers/deprecated/extruded-choropleth-layer-64/extruded-choropleth-layer-64';

// React exports
export { default as DeckGL } from './react/deckgl';
export { default } from './react/deckgl';

// Experimental Features (May change in minor version bumps, use at your own risk)
import { get } from './lib/utils/get';
import { count } from './lib/utils/count';
import { EffectManager, Effect } from './experimental/lib';
import { default as ReflectionEffect } from './experimental/effects/reflection-effect';

export var experimental = {
  get: get,
  count: count,
  EffectManager: EffectManager,
  Effect: Effect,
  ReflectionEffect: ReflectionEffect
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJhc3NlbWJsZVNoYWRlcnMiLCJMYXllciIsIkNvbXBvc2l0ZUxheWVyIiwiTGF5ZXJNYW5hZ2VyIiwiQXR0cmlidXRlTWFuYWdlciIsIkNPT1JESU5BVEVfU1lTVEVNIiwiZGVmYXVsdCIsIlZpZXdwb3J0IiwiUGVyc3BlY3RpdmVWaWV3cG9ydCIsIk9ydGhvZ3JhcGhpY1ZpZXdwb3J0IiwiV2ViTWVyY2F0b3JWaWV3cG9ydCIsIkFyY0xheWVyIiwiSWNvbkxheWVyIiwiTGluZUxheWVyIiwiUG9pbnRDbG91ZExheWVyIiwiU2NhdHRlcnBsb3RMYXllciIsIlNjcmVlbkdyaWRMYXllciIsIkdyaWRMYXllciIsIkdyaWRDZWxsTGF5ZXIiLCJIZXhhZ29uTGF5ZXIiLCJIZXhhZ29uQ2VsbExheWVyIiwiUGF0aExheWVyIiwiUG9seWdvbkxheWVyIiwiR2VvSnNvbkxheWVyIiwiQ2hvcm9wbGV0aExheWVyIiwiQ2hvcm9wbGV0aExheWVyNjQiLCJFeHRydWRlZENob3JvcGxldGhMYXllcjY0IiwiRGVja0dMIiwiZ2V0IiwiY291bnQiLCJFZmZlY3RNYW5hZ2VyIiwiRWZmZWN0IiwiUmVmbGVjdGlvbkVmZmVjdCIsImV4cGVyaW1lbnRhbCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVFBLGVBQVIsUUFBOEIsZ0JBQTlCOztBQUVBO0FBQ0EsU0FBUUMsS0FBUixFQUFlQyxjQUFmLEVBQStCQyxZQUEvQixFQUE2Q0MsZ0JBQTdDLFFBQW9FLE9BQXBFO0FBQ0EsU0FBUUMsaUJBQVIsUUFBZ0MsT0FBaEM7QUFDQTtBQUNBLFNBQVFDLFdBQVdDLFFBQW5CLFFBQWtDLDBCQUFsQztBQUNBLFNBQVFELFdBQVdFLG1CQUFuQixRQUE2QyxzQ0FBN0M7QUFDQSxTQUFRRixXQUFXRyxvQkFBbkIsUUFBOEMsdUNBQTlDO0FBQ0EsU0FBUUgsV0FBV0ksbUJBQW5CLFFBQTZDLHVDQUE3Qzs7QUFFQTtBQUNBLFNBQVFKLFdBQVdLLFFBQW5CLFFBQWtDLG1DQUFsQztBQUNBLFNBQVFMLFdBQVdNLFNBQW5CLFFBQW1DLHFDQUFuQztBQUNBLFNBQVFOLFdBQVdPLFNBQW5CLFFBQW1DLHFDQUFuQztBQUNBLFNBQVFQLFdBQVdRLGVBQW5CLFFBQXlDLG1EQUF6QztBQUNBLFNBQVFSLFdBQVdTLGdCQUFuQixRQUEwQyxtREFBMUM7O0FBRUEsU0FBUVQsV0FBV1UsZUFBbkIsUUFBeUMsbURBQXpDO0FBQ0EsU0FBUVYsV0FBV1csU0FBbkIsUUFBbUMscUNBQW5DO0FBQ0EsU0FBUVgsV0FBV1ksYUFBbkIsUUFBdUMsK0NBQXZDOztBQUVBLFNBQVFaLFdBQVdhLFlBQW5CLFFBQXNDLDJDQUF0QztBQUNBLFNBQVFiLFdBQVdjLGdCQUFuQixRQUEwQyxxREFBMUM7O0FBRUEsU0FBUWQsV0FBV2UsU0FBbkIsUUFBbUMscUNBQW5DO0FBQ0EsU0FBUWYsV0FBV2dCLFlBQW5CLFFBQXNDLDJDQUF0QztBQUNBLFNBQVFoQixXQUFXaUIsWUFBbkIsUUFBc0MsMkNBQXRDOztBQUVBO0FBQ0EsU0FBUWpCLFdBQVdrQixlQUFuQixRQUF5Qyx1REFBekM7QUFDQSxTQUFRbEIsV0FBV21CLGlCQUFuQixRQUEyQyw2REFBM0M7QUFDQSxTQUFRbkIsV0FBV29CLHlCQUFuQixRQUFtRCwrRUFBbkQ7O0FBRUE7QUFDQSxTQUFRcEIsV0FBV3FCLE1BQW5CLFFBQWdDLGdCQUFoQztBQUNBLFNBQVFyQixPQUFSLFFBQWlDLGdCQUFqQzs7QUFFQTtBQUNBLFNBQVFzQixHQUFSLFFBQWtCLGlCQUFsQjtBQUNBLFNBQVFDLEtBQVIsUUFBb0IsbUJBQXBCO0FBQ0EsU0FBUUMsYUFBUixFQUF1QkMsTUFBdkIsUUFBb0Msb0JBQXBDO0FBQ0EsU0FBUXpCLFdBQVcwQixnQkFBbkIsUUFBMEMsMENBQTFDOztBQUVBLE9BQU8sSUFBTUMsZUFBZTtBQUMxQkwsVUFEMEI7QUFFMUJDLGNBRjBCO0FBRzFCQyw4QkFIMEI7QUFJMUJDLGdCQUowQjtBQUsxQkM7QUFMMEIsQ0FBckIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUgLSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuLy8gVXRpbGl0aWVzXG5leHBvcnQge2Fzc2VtYmxlU2hhZGVyc30gZnJvbSAnLi9zaGFkZXItdXRpbHMnO1xuXG4vLyBMaWJcbmV4cG9ydCB7TGF5ZXIsIENvbXBvc2l0ZUxheWVyLCBMYXllck1hbmFnZXIsIEF0dHJpYnV0ZU1hbmFnZXJ9IGZyb20gJy4vbGliJztcbmV4cG9ydCB7Q09PUkRJTkFURV9TWVNURU19IGZyb20gJy4vbGliJztcbi8vIFZpZXdwb3J0c1xuZXhwb3J0IHtkZWZhdWx0IGFzIFZpZXdwb3J0fSBmcm9tICcuL2xpYi92aWV3cG9ydHMvdmlld3BvcnQnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIFBlcnNwZWN0aXZlVmlld3BvcnR9IGZyb20gJy4vbGliL3ZpZXdwb3J0cy9wZXJzcGVjdGl2ZS12aWV3cG9ydCc7XG5leHBvcnQge2RlZmF1bHQgYXMgT3J0aG9ncmFwaGljVmlld3BvcnR9IGZyb20gJy4vbGliL3ZpZXdwb3J0cy9vcnRob2dyYXBoaWMtdmlld3BvcnQnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIFdlYk1lcmNhdG9yVmlld3BvcnR9IGZyb20gJy4vbGliL3ZpZXdwb3J0cy93ZWItbWVyY2F0b3Itdmlld3BvcnQnO1xuXG4vLyBDb3JlIExheWVyc1xuZXhwb3J0IHtkZWZhdWx0IGFzIEFyY0xheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL2FyYy1sYXllci9hcmMtbGF5ZXInO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEljb25MYXllcn0gZnJvbSAnLi9sYXllcnMvY29yZS9pY29uLWxheWVyL2ljb24tbGF5ZXInO1xuZXhwb3J0IHtkZWZhdWx0IGFzIExpbmVMYXllcn0gZnJvbSAnLi9sYXllcnMvY29yZS9saW5lLWxheWVyL2xpbmUtbGF5ZXInO1xuZXhwb3J0IHtkZWZhdWx0IGFzIFBvaW50Q2xvdWRMYXllcn0gZnJvbSAnLi9sYXllcnMvY29yZS9wb2ludC1jbG91ZC1sYXllci9wb2ludC1jbG91ZC1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgU2NhdHRlcnBsb3RMYXllcn0gZnJvbSAnLi9sYXllcnMvY29yZS9zY2F0dGVycGxvdC1sYXllci9zY2F0dGVycGxvdC1sYXllcic7XG5cbmV4cG9ydCB7ZGVmYXVsdCBhcyBTY3JlZW5HcmlkTGF5ZXJ9IGZyb20gJy4vbGF5ZXJzL2NvcmUvc2NyZWVuLWdyaWQtbGF5ZXIvc2NyZWVuLWdyaWQtbGF5ZXInO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEdyaWRMYXllcn0gZnJvbSAnLi9sYXllcnMvY29yZS9ncmlkLWxheWVyL2dyaWQtbGF5ZXInO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEdyaWRDZWxsTGF5ZXJ9IGZyb20gJy4vbGF5ZXJzL2NvcmUvZ3JpZC1jZWxsLWxheWVyL2dyaWQtY2VsbC1sYXllcic7XG5cbmV4cG9ydCB7ZGVmYXVsdCBhcyBIZXhhZ29uTGF5ZXJ9IGZyb20gJy4vbGF5ZXJzL2NvcmUvaGV4YWdvbi1sYXllci9oZXhhZ29uLWxheWVyJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBIZXhhZ29uQ2VsbExheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL2hleGFnb24tY2VsbC1sYXllci9oZXhhZ29uLWNlbGwtbGF5ZXInO1xuXG5leHBvcnQge2RlZmF1bHQgYXMgUGF0aExheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL3BhdGgtbGF5ZXIvcGF0aC1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgUG9seWdvbkxheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL3BvbHlnb24tbGF5ZXIvcG9seWdvbi1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgR2VvSnNvbkxheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL2dlb2pzb24tbGF5ZXIvZ2VvanNvbi1sYXllcic7XG5cbi8vIERlcHJlY2F0ZWQgTGF5ZXJzXG5leHBvcnQge2RlZmF1bHQgYXMgQ2hvcm9wbGV0aExheWVyfSBmcm9tICcuL2xheWVycy9kZXByZWNhdGVkL2Nob3JvcGxldGgtbGF5ZXIvY2hvcm9wbGV0aC1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgQ2hvcm9wbGV0aExheWVyNjR9IGZyb20gJy4vbGF5ZXJzL2RlcHJlY2F0ZWQvY2hvcm9wbGV0aC1sYXllci02NC9jaG9yb3BsZXRoLWxheWVyLTY0JztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBFeHRydWRlZENob3JvcGxldGhMYXllcjY0fSBmcm9tICcuL2xheWVycy9kZXByZWNhdGVkL2V4dHJ1ZGVkLWNob3JvcGxldGgtbGF5ZXItNjQvZXh0cnVkZWQtY2hvcm9wbGV0aC1sYXllci02NCc7XG5cbi8vIFJlYWN0IGV4cG9ydHNcbmV4cG9ydCB7ZGVmYXVsdCBhcyBEZWNrR0x9IGZyb20gJy4vcmVhY3QvZGVja2dsJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBkZWZhdWx0fSBmcm9tICcuL3JlYWN0L2RlY2tnbCc7XG5cbi8vIEV4cGVyaW1lbnRhbCBGZWF0dXJlcyAoTWF5IGNoYW5nZSBpbiBtaW5vciB2ZXJzaW9uIGJ1bXBzLCB1c2UgYXQgeW91ciBvd24gcmlzaylcbmltcG9ydCB7Z2V0fSBmcm9tICcuL2xpYi91dGlscy9nZXQnO1xuaW1wb3J0IHtjb3VudH0gZnJvbSAnLi9saWIvdXRpbHMvY291bnQnO1xuaW1wb3J0IHtFZmZlY3RNYW5hZ2VyLCBFZmZlY3R9IGZyb20gJy4vZXhwZXJpbWVudGFsL2xpYic7XG5pbXBvcnQge2RlZmF1bHQgYXMgUmVmbGVjdGlvbkVmZmVjdH0gZnJvbSAnLi9leHBlcmltZW50YWwvZWZmZWN0cy9yZWZsZWN0aW9uLWVmZmVjdCc7XG5cbmV4cG9ydCBjb25zdCBleHBlcmltZW50YWwgPSB7XG4gIGdldCxcbiAgY291bnQsXG4gIEVmZmVjdE1hbmFnZXIsXG4gIEVmZmVjdCxcbiAgUmVmbGVjdGlvbkVmZmVjdFxufTtcbiJdfQ==