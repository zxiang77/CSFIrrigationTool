var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import { Layer } from '../../../lib';
import GridCellLayer from '../grid-cell-layer/grid-cell-layer';

import { pointToDensityGridData } from './grid-aggregator';
import { linearScale, quantizeScale } from '../../../utils/scale-utils';
import { defaultColorRange } from '../../../utils/color-utils';

var defaultCellSize = 1000;
var defaultElevationRange = [0, 1000];
var defaultElevationScale = 1;

var defaultProps = {
  cellSize: defaultCellSize,
  colorRange: defaultColorRange,
  colorDomain: null,
  elevationRange: defaultElevationRange,
  elevationDomain: null,
  elevationScale: defaultElevationScale,
  getPosition: function getPosition(x) {
    return x.position;
  },
  extruded: false,
  fp64: false,
  // Optional settings for 'lighting' shader module
  lightSettings: {
    lightsPosition: [-122.45, 37.75, 8000, -122.0, 38.00, 5000],
    ambientRatio: 0.05,
    diffuseRatio: 0.6,
    specularRatio: 0.8,
    lightsStrength: [2.0, 0.0, 0.0, 0.0],
    numberOfLights: 2
  }
};

function _needsReProjectPoints(oldProps, props) {
  return oldProps.cellSize !== props.cellSize;
}

var GridLayer = function (_Layer) {
  _inherits(GridLayer, _Layer);

  function GridLayer() {
    _classCallCheck(this, GridLayer);

    return _possibleConstructorReturn(this, (GridLayer.__proto__ || Object.getPrototypeOf(GridLayer)).apply(this, arguments));
  }

  _createClass(GridLayer, [{
    key: 'initializeState',
    value: function initializeState() {
      this.state = {
        layerData: [],
        countRange: null
      };
    }
  }, {
    key: 'updateState',
    value: function updateState(_ref) {
      var oldProps = _ref.oldProps,
          props = _ref.props,
          changeFlags = _ref.changeFlags;

      if (changeFlags.dataChanged || _needsReProjectPoints(oldProps, props)) {
        var _props = this.props,
            data = _props.data,
            cellSize = _props.cellSize,
            getPosition = _props.getPosition;

        var _pointToDensityGridDa = pointToDensityGridData(data, cellSize, getPosition),
            layerData = _pointToDensityGridDa.layerData,
            countRange = _pointToDensityGridDa.countRange;

        Object.assign(this.state, { layerData: layerData, countRange: countRange });
      }
    }
  }, {
    key: 'getPickingInfo',
    value: function getPickingInfo(_ref2) {
      var info = _ref2.info;

      var pickedCell = info.picked && info.index > -1 ? this.state.layerData[info.index] : null;

      return Object.assign(info, {
        picked: Boolean(pickedCell),
        // override object with picked cell
        object: pickedCell
      });
    }
  }, {
    key: '_onGetSublayerColor',
    value: function _onGetSublayerColor(cell) {
      var colorRange = this.props.colorRange;

      var colorDomain = this.props.colorDomain || this.state.countRange;

      return quantizeScale(colorDomain, colorRange, cell.count);
    }
  }, {
    key: '_onGetSublayerElevation',
    value: function _onGetSublayerElevation(cell) {
      var elevationRange = this.props.elevationRange;

      var elevationDomain = this.props.elevationDomain || [0, this.state.countRange[1]];
      return linearScale(elevationDomain, elevationRange, cell.count);
    }
  }, {
    key: 'renderLayers',
    value: function renderLayers() {
      var _props2 = this.props,
          id = _props2.id,
          elevationScale = _props2.elevationScale,
          fp64 = _props2.fp64,
          extruded = _props2.extruded,
          cellSize = _props2.cellSize,
          lightSettings = _props2.lightSettings;

      // base layer props

      var _props3 = this.props,
          opacity = _props3.opacity,
          pickable = _props3.pickable,
          visible = _props3.visible;

      // viewport props

      var _props4 = this.props,
          positionOrigin = _props4.positionOrigin,
          projectionMode = _props4.projectionMode,
          modelMatrix = _props4.modelMatrix;


      return new GridCellLayer({
        id: id + '-grid-cell',
        data: this.state.layerData,
        cellSize: cellSize,
        lightSettings: lightSettings,
        elevationScale: elevationScale,
        extruded: extruded,
        fp64: fp64,
        opacity: opacity,
        pickable: pickable,
        visible: visible,
        projectionMode: projectionMode,
        positionOrigin: positionOrigin,
        modelMatrix: modelMatrix,
        getColor: this._onGetSublayerColor.bind(this),
        getElevation: this._onGetSublayerElevation.bind(this),
        getPosition: function getPosition(d) {
          return d.position;
        },
        updateTriggers: {
          getColor: { colorRange: this.props.colorRange },
          getElevation: { elevationRange: this.props.elevationRange }
        }
      });
    }
  }]);

  return GridLayer;
}(Layer);

export default GridLayer;


GridLayer.layerName = 'GridLayer';
GridLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXllcnMvY29yZS9ncmlkLWxheWVyL2dyaWQtbGF5ZXIuanMiXSwibmFtZXMiOlsiTGF5ZXIiLCJHcmlkQ2VsbExheWVyIiwicG9pbnRUb0RlbnNpdHlHcmlkRGF0YSIsImxpbmVhclNjYWxlIiwicXVhbnRpemVTY2FsZSIsImRlZmF1bHRDb2xvclJhbmdlIiwiZGVmYXVsdENlbGxTaXplIiwiZGVmYXVsdEVsZXZhdGlvblJhbmdlIiwiZGVmYXVsdEVsZXZhdGlvblNjYWxlIiwiZGVmYXVsdFByb3BzIiwiY2VsbFNpemUiLCJjb2xvclJhbmdlIiwiY29sb3JEb21haW4iLCJlbGV2YXRpb25SYW5nZSIsImVsZXZhdGlvbkRvbWFpbiIsImVsZXZhdGlvblNjYWxlIiwiZ2V0UG9zaXRpb24iLCJ4IiwicG9zaXRpb24iLCJleHRydWRlZCIsImZwNjQiLCJsaWdodFNldHRpbmdzIiwibGlnaHRzUG9zaXRpb24iLCJhbWJpZW50UmF0aW8iLCJkaWZmdXNlUmF0aW8iLCJzcGVjdWxhclJhdGlvIiwibGlnaHRzU3RyZW5ndGgiLCJudW1iZXJPZkxpZ2h0cyIsIl9uZWVkc1JlUHJvamVjdFBvaW50cyIsIm9sZFByb3BzIiwicHJvcHMiLCJHcmlkTGF5ZXIiLCJzdGF0ZSIsImxheWVyRGF0YSIsImNvdW50UmFuZ2UiLCJjaGFuZ2VGbGFncyIsImRhdGFDaGFuZ2VkIiwiZGF0YSIsIk9iamVjdCIsImFzc2lnbiIsImluZm8iLCJwaWNrZWRDZWxsIiwicGlja2VkIiwiaW5kZXgiLCJCb29sZWFuIiwib2JqZWN0IiwiY2VsbCIsImNvdW50IiwiaWQiLCJvcGFjaXR5IiwicGlja2FibGUiLCJ2aXNpYmxlIiwicG9zaXRpb25PcmlnaW4iLCJwcm9qZWN0aW9uTW9kZSIsIm1vZGVsTWF0cml4IiwiZ2V0Q29sb3IiLCJfb25HZXRTdWJsYXllckNvbG9yIiwiYmluZCIsImdldEVsZXZhdGlvbiIsIl9vbkdldFN1YmxheWVyRWxldmF0aW9uIiwiZCIs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QVAxQixXQU8wQkEsV0FQMUI7OztBQVNiLGFBQU8sSUFBSXJELGFBQUosQ0FBa0I7QUFDdkIrQyxZQUFPQSxFQUFQLGVBRHVCO0FBRXZCWCxjQUFNLEtBQUtMLEtBQUwsQ0FBV0MsU0FGTTtBQUd2QnZCLDBCQUh1QjtBQUl2Qlcsb0NBSnVCO0FBS3ZCTixzQ0FMdUI7QUFNdkJJLDBCQU51QjtBQU92QkMsa0JBUHVCO0FBUXZCNkIsd0JBUnVCO0FBU3ZCQywwQkFUdUI7QUFVdkJDLHdCQVZ1QjtBQVd2QkUsc0NBWHVCO0FBWXZCRCxzQ0FadUI7QUFhdkJFLGdDQWJ1QjtBQWN2QkMsa0JBQVUsS0FBS0MsbUJBQUwsQ0FBeUJDLElBQXpCLENBQThCLElBQTlCLENBZGE7QUFldkJDLHNCQUFjLEtBQUtDLHVCQUFMLENBQTZCRixJQUE3QixDQUFrQyxJQUFsQyxDQWZTO0FBZ0J2QnpDLHFCQUFhO0FBQUEsaUJBQUs0QyxFQUFFMUMsUUFBUDtBQUFBLFNBaEJVO0FBaUJ2QjJDLHdCQUFnQjtBQUNkTixvQkFBVSxFQUFDNUMsWUFBWSxLQUFLbUIsS0FBTCxDQUFXbkIsVUFBeEIsRUFESTtBQUVkK0Msd0JBQWMsRUFBQzdDLGdCQUFnQixLQUFLaUIsS0FBTCxDQUFXakIsY0FBNUI7QUFGQTtBQWpCTyxPQUFsQixDQUFQO0FBc0JEOzs7O0VBMUVvQ2IsSzs7ZUFBbEIrQixTOzs7QUE2RXJCQSxVQUFVK0IsU0FBVixHQUFzQixXQUF0QjtBQUNBL0IsVUFBVXRCLFlBQVYsR0FBeUJBLFlBQXpCIiwiZmlsZSI6ImdyaWQtbGF5ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUgLSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtMYXllcn0gZnJvbSAnLi4vLi4vLi4vbGliJztcbmltcG9ydCBHcmlkQ2VsbExheWVyIGZyb20gJy4uL2dyaWQtY2VsbC1sYXllci9ncmlkLWNlbGwtbGF5ZXInO1xuXG5pbXBvcnQge3BvaW50VG9EZW5zaXR5R3JpZERhdGF9IGZyb20gJy4vZ3JpZC1hZ2dyZWdhdG9yJztcbmltcG9ydCB7bGluZWFyU2NhbGUsIHF1YW50aXplU2NhbGV9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3NjYWxlLXV0aWxzJztcbmltcG9ydCB7ZGVmYXVsdENvbG9yUmFuZ2V9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NvbG9yLXV0aWxzJztcblxuY29uc3QgZGVmYXVsdENlbGxTaXplID0gMTAwMDtcbmNvbnN0IGRlZmF1bHRFbGV2YXRpb25SYW5nZSA9IFswLCAxMDAwXTtcbmNvbnN0IGRlZmF1bHRFbGV2YXRpb25TY2FsZSA9IDE7XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgY2VsbFNpemU6IGRlZmF1bHRDZWxsU2l6ZSxcbiAgY29sb3JSYW5nZTogZGVmYXVsdENvbG9yUmFuZ2UsXG4gIGNvbG9yRG9tYWluOiBudWxsLFxuICBlbGV2YXRpb25SYW5nZTogZGVmYXVsdEVsZXZhdGlvblJhbmdlLFxuICBlbGV2YXRpb25Eb21haW46IG51bGwsXG4gIGVsZXZhdGlvblNjYWxlOiBkZWZhdWx0RWxldmF0aW9uU2NhbGUsXG4gIGdldFBvc2l0aW9uOiB4ID0+IHgucG9zaXRpb24sXG4gIGV4dHJ1ZGVkOiBmYWxzZSxcbiAgZnA2NDogZmFsc2UsXG4gIC8vIE9wdGlvbmFsIHNldHRpbmdzIGZvciAnbGlnaHRpbmcnIHNoYWRlciBtb2R1bGVcbiAgbGlnaHRTZXR0aW5nczoge1xuICAgIGxpZ2h0c1Bvc2l0aW9uOiBbLTEyMi40NSwgMzcuNzUsIDgwMDAsIC0xMjIuMCwgMzguMDAsIDUwMDBdLFxuICAgIGFtYmllbnRSYXRpbzogMC4wNSxcbiAgICBkaWZmdXNlUmF0aW86IDAuNixcbiAgICBzcGVjdWxhclJhdGlvOiAwLjgsXG4gICAgbGlnaHRzU3RyZW5ndGg6IFsyLjAsIDAuMCwgMC4wLCAwLjBdLFxuICAgIG51bWJlck9mTGlnaHRzOiAyXG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9uZWVkc1JlUHJvamVjdFBvaW50cyhvbGRQcm9wcywgcHJvcHMpIHtcbiAgcmV0dXJuIG9sZFByb3BzLmNlbGxTaXplICE9PSBwcm9wcy5jZWxsU2l6ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JpZExheWVyIGV4dGVuZHMgTGF5ZXIge1xuICBpbml0aWFsaXplU3RhdGUoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxheWVyRGF0YTogW10sXG4gICAgICBjb3VudFJhbmdlOiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZVN0YXRlKHtvbGRQcm9wcywgcHJvcHMsIGNoYW5nZUZsYWdzfSkge1xuICAgIGlmIChjaGFuZ2VGbGFncy5kYXRhQ2hhbmdlZCB8fCBfbmVlZHNSZVByb2plY3RQb2ludHMob2xkUHJvcHMsIHByb3BzKSkge1xuICAgICAgY29uc3Qge2RhdGEsIGNlbGxTaXplLCBnZXRQb3NpdGlvbn0gPSB0aGlzLnByb3BzO1xuXG4gICAgICBjb25zdCB7bGF5ZXJEYXRhLCBjb3VudFJhbmdlfSA9XG4gICAgICAgIHBvaW50VG9EZW5zaXR5R3JpZERhdGEoZGF0YSwgY2VsbFNpemUsIGdldFBvc2l0aW9uKTtcblxuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLnN0YXRlLCB7bGF5ZXJEYXRhLCBjb3VudFJhbmdlfSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0UGlja2luZ0luZm8oe2luZm99KSB7XG4gICAgY29uc3QgcGlja2VkQ2VsbCA9IGluZm8ucGlja2VkICYmIGluZm8uaW5kZXggPiAtMSA/XG4gICAgICB0aGlzLnN0YXRlLmxheWVyRGF0YVtpbmZvLmluZGV4XSA6IG51bGw7XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihpbmZvLCB7XG4gICAgICBwaWNrZWQ6IEJvb2xlYW4ocGlja2VkQ2VsbCksXG4gICAgICAvLyBvdmVycmlkZSBvYmplY3Qgd2l0aCBwaWNrZWQgY2VsbFxuICAgICAgb2JqZWN0OiBwaWNrZWRDZWxsXG4gICAgfSk7XG4gIH1cblxuICBfb25HZXRTdWJsYXllckNvbG9yKGNlbGwpIHtcbiAgICBjb25zdCB7Y29sb3JSYW5nZX0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNvbG9yRG9tYWluID0gdGhpcy5wcm9wcy5jb2xvckRvbWFpbiB8fCB0aGlzLnN0YXRlLmNvdW50UmFuZ2U7XG5cbiAgICByZXR1cm4gcXVhbnRpemVTY2FsZShjb2xvckRvbWFpbiwgY29sb3JSYW5nZSwgY2VsbC5jb3VudCk7XG4gIH1cblxuICBfb25HZXRTdWJsYXllckVsZXZhdGlvbihjZWxsKSB7XG4gICAgY29uc3Qge2VsZXZhdGlvblJhbmdlfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZWxldmF0aW9uRG9tYWluID0gdGhpcy5wcm9wcy5lbGV2YXRpb25Eb21haW4gfHwgWzAsIHRoaXMuc3RhdGUuY291bnRSYW5nZVsxXV07XG4gICAgcmV0dXJuIGxpbmVhclNjYWxlKGVsZXZhdGlvbkRvbWFpbiwgZWxldmF0aW9uUmFuZ2UsIGNlbGwuY291bnQpO1xuICB9XG5cbiAgcmVuZGVyTGF5ZXJzKCkge1xuICAgIGNvbnN0IHtpZCwgZWxldmF0aW9uU2NhbGUsIGZwNjQsIGV4dHJ1ZGVkLCBjZWxsU2l6ZSwgbGlnaHRTZXR0aW5nc30gPSB0aGlzLnByb3BzO1xuXG4gICAgLy8gYmFzZSBsYXllciBwcm9wc1xuICAgIGNvbnN0IHtvcGFjaXR5LCBwaWNrYWJsZSwgdmlzaWJsZX0gPSB0aGlzLnByb3BzO1xuXG4gICAgLy8gdmlld3BvcnQgcHJvcHNcbiAgICBjb25zdCB7cG9zaXRpb25PcmlnaW4sIHByb2plY3Rpb25Nb2RlLCBtb2RlbE1hdHJpeH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIG5ldyBHcmlkQ2VsbExheWVyKHtcbiAgICAgIGlkOiBgJHtpZH0tZ3JpZC1jZWxsYCxcbiAgICAgIGRhdGE6IHRoaXMuc3RhdGUubGF5ZXJEYXRhLFxuICAgICAgY2VsbFNpemUsXG4gICAgICBsaWdodFNldHRpbmdzLFxuICAgICAgZWxldmF0aW9uU2NhbGUsXG4gICAgICBleHRydWRlZCxcbiAgICAgIGZwNjQsXG4gICAgICBvcGFjaXR5LFxuICAgICAgcGlja2FibGUsXG4gICAgICB2aXNpYmxlLFxuICAgICAgcHJvamVjdGlvbk1vZGUsXG4gICAgICBwb3NpdGlvbk9yaWdpbixcbiAgICAgIG1vZGVsTWF0cml4LFxuICAgICAgZ2V0Q29sb3I6IHRoaXMuX29uR2V0U3VibGF5ZXJDb2xvci5iaW5kKHRoaXMpLFxuICAgICAgZ2V0RWxldmF0aW9uOiB0aGlzLl9vbkdldFN1YmxheWVyRWxldmF0aW9uLmJpbmQodGhpcyksXG4gICAgICBnZXRQb3NpdGlvbjogZCA9PiBkLnBvc2l0aW9uLFxuICAgICAgdXBkYXRlVHJpZ2dlcnM6IHtcbiAgICAgICAgZ2V0Q29sb3I6IHtjb2xvclJhbmdlOiB0aGlzLnByb3BzLmNvbG9yUmFuZ2V9LFxuICAgICAgICBnZXRFbGV2YXRpb246IHtlbGV2YXRpb25SYW5nZTogdGhpcy5wcm9wcy5lbGV2YXRpb25SYW5nZX1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5HcmlkTGF5ZXIubGF5ZXJOYW1lID0gJ0dyaWRMYXllcic7XG5HcmlkTGF5ZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuIl19