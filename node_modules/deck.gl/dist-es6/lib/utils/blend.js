// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// get current blending settings
export function getBlendMode(gl) {
  return {
    enabled: gl.getParameter(gl.BLEND),
    equationRGB: gl.getParameter(gl.BLEND_EQUATION_RGB),
    equationAlpha: gl.getParameter(gl.BLEND_EQUATION_ALPHA),
    srcRGB: gl.getParameter(gl.BLEND_SRC_RGB),
    dstRGB: gl.getParameter(gl.BLEND_DST_RGB),
    srcAlpha: gl.getParameter(gl.BLEND_SRC_ALPHA),
    dstAlpha: gl.getParameter(gl.BLEND_DST_ALPHA)
  };
}

// apply blending settings
export function setBlendMode(gl, settings) {
  if (settings.enabled) {
    gl.enable(gl.BLEND);
  } else {
    gl.disable(gl.BLEND);
  }
  gl.blendEquationSeparate(settings.equationRGB, settings.equationAlpha);
  gl.blendFuncSeparate(settings.srcRGB, settings.dstRGB, settings.srcAlpha, settings.dstAlpha);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdXRpbHMvYmxlbmQuanMiXSwibmFtZXMiOlsiZ2V0QmxlbmRNb2RlIiwiZ2wiLCJlbmFibGVkIiwiZ2V0UGFyYW1ldGVyIiwiQkxFTkQiLCJlcXVhdGlvblJHQiIsIkJMRU5EX0VRVUFUSU9OX1JHQiIsImVxdWF0aW9uQWxwaGEiLCJCTEVORF9FUVVBVElPTl9BTFBIQSIsInNyY1JHQiIsIkJMRU5EX1NSQ19SR0IiLCJkc3RSR0IiLCJCTEVORF9EU1RfUkdCIiwic3JjQWxwaGEiLCJCTEVORF9TUkNfQUxQSEEiLCJkc3RBbHBoYSIsIkJMRU5EX0RTVF9BTFBIQSIsInNldEJsZW5kTW9kZSIsInNldHRpbmdzIiwiZW5hYmxlIiwiZGlzYWJsZSIsImJsZW5kRXF1YXRpb25TZXBhcmF0ZSIsImJsZW5kRnVuY1NlcGFyYXRlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU8sU0FBU0EsWUFBVCxDQUFzQkMsRUFBdEIsRUFBMEI7QUFDL0IsU0FBTztBQUNMQyxhQUFTRCxHQUFHRSxZQUFILENBQWdCRixHQUFHRyxLQUFuQixDQURKO0FBRUxDLGlCQUFhSixHQUFHRSxZQUFILENBQWdCRixHQUFHSyxrQkFBbkIsQ0FGUjtBQUdMQyxtQkFBZU4sR0FBR0UsWUFBSCxDQUFnQkYsR0FBR08sb0JBQW5CLENBSFY7QUFJTEMsWUFBUVIsR0FBR0UsWUFBSCxDQUFnQkYsR0FBR1MsYUFBbkIsQ0FKSDtBQUtMQyxZQUFRVixHQUFHRSxZQUFILENBQWdCRixHQUFHVyxhQUFuQixDQUxIO0FBTUxDLGNBQVVaLEdBQUdFLFlBQUgsQ0FBZ0JGLEdBQUdhLGVBQW5CLENBTkw7QUFPTEMsY0FBVWQsR0FBR0UsWUFBSCxDQUFnQkYsR0FBR2UsZUFBbkI7QUFQTCxHQUFQO0FBU0Q7O0FBRUQ7QUFDQSxPQUFPLFNBQVNDLFlBQVQsQ0FBc0JoQixFQUF0QixFQUEwQmlCLFFBQTFCLEVBQW9DO0FBQ3pDLE1BQUlBLFNBQVNoQixPQUFiLEVBQXNCO0FBQ3BCRCxPQUFHa0IsTUFBSCxDQUFVbEIsR0FBR0csS0FBYjtBQUNELEdBRkQsTUFFTztBQUNMSCxPQUFHbUIsT0FBSCxDQUFXbkIsR0FBR0csS0FBZDtBQUNEO0FBQ0RILEtBQUdvQixxQkFBSCxDQUF5QkgsU0FBU2IsV0FBbEMsRUFBK0NhLFNBQVNYLGFBQXhEO0FBQ0FOLEtBQUdxQixpQkFBSCxDQUFxQkosU0FBU1QsTUFBOUIsRUFBc0NTLFNBQVNQLE1BQS9DLEVBQXVETyxTQUFTTCxRQUFoRSxFQUEwRUssU0FBU0gsUUFBbkY7QUFDRCIsImZpbGUiOiJibGVuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSAtIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG4vLyBnZXQgY3VycmVudCBibGVuZGluZyBzZXR0aW5nc1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJsZW5kTW9kZShnbCkge1xuICByZXR1cm4ge1xuICAgIGVuYWJsZWQ6IGdsLmdldFBhcmFtZXRlcihnbC5CTEVORCksXG4gICAgZXF1YXRpb25SR0I6IGdsLmdldFBhcmFtZXRlcihnbC5CTEVORF9FUVVBVElPTl9SR0IpLFxuICAgIGVxdWF0aW9uQWxwaGE6IGdsLmdldFBhcmFtZXRlcihnbC5CTEVORF9FUVVBVElPTl9BTFBIQSksXG4gICAgc3JjUkdCOiBnbC5nZXRQYXJhbWV0ZXIoZ2wuQkxFTkRfU1JDX1JHQiksXG4gICAgZHN0UkdCOiBnbC5nZXRQYXJhbWV0ZXIoZ2wuQkxFTkRfRFNUX1JHQiksXG4gICAgc3JjQWxwaGE6IGdsLmdldFBhcmFtZXRlcihnbC5CTEVORF9TUkNfQUxQSEEpLFxuICAgIGRzdEFscGhhOiBnbC5nZXRQYXJhbWV0ZXIoZ2wuQkxFTkRfRFNUX0FMUEhBKVxuICB9O1xufVxuXG4vLyBhcHBseSBibGVuZGluZyBzZXR0aW5nc1xuZXhwb3J0IGZ1bmN0aW9uIHNldEJsZW5kTW9kZShnbCwgc2V0dGluZ3MpIHtcbiAgaWYgKHNldHRpbmdzLmVuYWJsZWQpIHtcbiAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xuICB9IGVsc2Uge1xuICAgIGdsLmRpc2FibGUoZ2wuQkxFTkQpO1xuICB9XG4gIGdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZShzZXR0aW5ncy5lcXVhdGlvblJHQiwgc2V0dGluZ3MuZXF1YXRpb25BbHBoYSk7XG4gIGdsLmJsZW5kRnVuY1NlcGFyYXRlKHNldHRpbmdzLnNyY1JHQiwgc2V0dGluZ3MuZHN0UkdCLCBzZXR0aW5ncy5zcmNBbHBoYSwgc2V0dGluZ3MuZHN0QWxwaGEpO1xufVxuIl19