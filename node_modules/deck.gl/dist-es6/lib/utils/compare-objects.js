var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import assert from 'assert';

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * @param {Object} opt.oldProps - object with old key/value pairs
 * @param {Object} opt.newProps - object with new key/value pairs
 * @param {Object} opt.ignoreProps={} - object, keys that should not be compared
 * @returns {null|String} - null when values of all keys are strictly equal.
 *   if unequal, returns a string explaining what changed.
 */
/* eslint-disable max-statements, complexity */
export function compareProps() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      oldProps = _ref.oldProps,
      newProps = _ref.newProps,
      _ref$ignoreProps = _ref.ignoreProps,
      ignoreProps = _ref$ignoreProps === undefined ? {} : _ref$ignoreProps;

  assert(oldProps !== undefined && newProps !== undefined, 'compareProps args');

  if (oldProps === newProps) {
    return null;
  }

  if ((typeof oldProps === 'undefined' ? 'undefined' : _typeof(oldProps)) !== 'object' || oldProps === null) {
    return 'old props is not an object';
  }
  if ((typeof newProps === 'undefined' ? 'undefined' : _typeof(newProps)) !== 'object' || newProps === null) {
    return 'new props is not an object';
  }

  // Test if new props different from old props
  for (var key in oldProps) {
    if (!(key in ignoreProps)) {
      if (!newProps.hasOwnProperty(key)) {
        return 'prop ' + key + ' dropped: ' + oldProps[key] + ' -> (undefined)';
      } else if (oldProps[key] !== newProps[key]) {
        return 'prop ' + key + ' changed: ' + oldProps[key] + ' -> ' + newProps[key];
      }
    }
  }

  // Test if any new props have been added
  for (var _key in newProps) {
    if (!(_key in ignoreProps)) {
      if (!oldProps.hasOwnProperty(_key)) {
        return 'prop ' + _key + ' added: (undefined) -> ' + newProps[_key];
      }
    }
  }

  return null;
}
/* eslint-enable max-statements, complexity */

// Shallow compare
/* eslint-disable complexity */
export function areEqualShallow(a, b) {
  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref2$ignore = _ref2.ignore,
      ignore = _ref2$ignore === undefined ? {} : _ref2$ignore;

  if (a === b) {
    return true;
  }

  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) !== 'object' || a === null || (typeof b === 'undefined' ? 'undefined' : _typeof(b)) !== 'object' || b === null) {
    return false;
  }

  if (Object.keys(a).length !== Object.keys(b).length) {
    return false;
  }

  for (var key in a) {
    if (!(key in ignore) && (!(key in b) || a[key] !== b[key])) {
      return false;
    }
  }
  for (var _key2 in b) {
    if (!(_key2 in ignore) && !(_key2 in a)) {
      return false;
    }
  }
  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdXRpbHMvY29tcGFyZS1vYmplY3RzLmpzIl0sIm5hbWVzIjpbImFzc2VydCIsImNvbXBhcmVQcm9wcyIsIm9sZFByb3BzIiwibmV3UHJvcHMiLCJpZ25vcmVQcm9wcyIsInVuZGVmaW5lZCIsImtleSIsImhhc093blByb3BlcnR5IiwiYXJlRXF1YWxTaGFsbG93IiwiYSIsImIiLCJpZ25vcmUiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQVAsTUFBbUIsUUFBbkI7O0FBRUE7Ozs7Ozs7OztBQVNBO0FBQ0EsT0FBTyxTQUFTQyxZQUFULEdBQW1FO0FBQUEsaUZBQUosRUFBSTtBQUFBLE1BQTVDQyxRQUE0QyxRQUE1Q0EsUUFBNEM7QUFBQSxNQUFsQ0MsUUFBa0MsUUFBbENBLFFBQWtDO0FBQUEsOEJBQXhCQyxXQUF3QjtBQUFBLE1BQXhCQSxXQUF3QixvQ0FBVixFQUFVOztBQUN4RUosU0FBT0UsYUFBYUcsU0FBYixJQUEwQkYsYUFBYUUsU0FBOUMsRUFBeUQsbUJBQXpEOztBQUVBLE1BQUlILGFBQWFDLFFBQWpCLEVBQTJCO0FBQ3pCLFdBQU8sSUFBUDtBQUNEOztBQUVELE1BQUksUUFBT0QsUUFBUCx5Q0FBT0EsUUFBUCxPQUFvQixRQUFwQixJQUFnQ0EsYUFBYSxJQUFqRCxFQUF1RDtBQUNyRCxXQUFPLDRCQUFQO0FBQ0Q7QUFDRCxNQUFJLFFBQU9DLFFBQVAseUNBQU9BLFFBQVAsT0FBb0IsUUFBcEIsSUFBZ0NBLGFBQWEsSUFBakQsRUFBdUQ7QUFDckQsV0FBTyw0QkFBUDtBQUNEOztBQUVEO0FBQ0EsT0FBSyxJQUFNRyxHQUFYLElBQWtCSixRQUFsQixFQUE0QjtBQUMxQixRQUFJLEVBQUVJLE9BQU9GLFdBQVQsQ0FBSixFQUEyQjtBQUN6QixVQUFJLENBQUNELFNBQVNJLGNBQVQsQ0FBd0JELEdBQXhCLENBQUwsRUFBbUM7QUFDakMseUJBQWVBLEdBQWYsa0JBQStCSixTQUFTSSxHQUFULENBQS9CO0FBQ0QsT0FGRCxNQUVPLElBQUlKLFNBQVNJLEdBQVQsTUFBa0JILFNBQVNHLEdBQVQsQ0FBdEIsRUFBcUM7QUFDMUMseUJBQWVBLEdBQWYsa0JBQStCSixTQUFTSSxHQUFULENBQS9CLFlBQW1ESCxTQUFTRyxHQUFULENBQW5EO0FBQ0Q7QUFDRjtBQUNGOztBQUVEO0FBQ0EsT0FBSyxJQUFNQSxJQUFYLElBQWtCSCxRQUFsQixFQUE0QjtBQUMxQixRQUFJLEVBQUVHLFFBQU9GLFdBQVQsQ0FBSixFQUEyQjtBQUN6QixVQUFJLENBQUNGLFNBQVNLLGNBQVQsQ0FBd0JELElBQXhCLENBQUwsRUFBbUM7QUFDakMseUJBQWVBLElBQWYsK0JBQTRDSCxTQUFTRyxJQUFULENBQTVDO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQU8sSUFBUDtBQUNEO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBLE9BQU8sU0FBU0UsZUFBVCxDQUF5QkMsQ0FBekIsRUFBNEJDLENBQTVCLEVBQW1EO0FBQUEsa0ZBQUosRUFBSTtBQUFBLDJCQUFuQkMsTUFBbUI7QUFBQSxNQUFuQkEsTUFBbUIsZ0NBQVYsRUFBVTs7QUFFeEQsTUFBSUYsTUFBTUMsQ0FBVixFQUFhO0FBQ1gsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsTUFBSSxRQUFPRCxDQUFQLHlDQUFPQSxDQUFQLE9BQWEsUUFBYixJQUF5QkEsTUFBTSxJQUEvQixJQUNGLFFBQU9DLENBQVAseUNBQU9BLENBQVAsT0FBYSxRQURYLElBQ3VCQSxNQUFNLElBRGpDLEVBQ3VDO0FBQ3JDLFdBQU8sS0FBUDtBQUNEOztBQUVELE1BQUlFLE9BQU9DLElBQVAsQ0FBWUosQ0FBWixFQUFlSyxNQUFmLEtBQTBCRixPQUFPQyxJQUFQLENBQVlILENBQVosRUFBZUksTUFBN0MsRUFBcUQ7QUFDbkQsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsT0FBSyxJQUFNUixHQUFYLElBQWtCRyxDQUFsQixFQUFxQjtBQUNuQixRQUFJLEVBQUVILE9BQU9LLE1BQVQsTUFBcUIsRUFBRUwsT0FBT0ksQ0FBVCxLQUFlRCxFQUFFSCxHQUFGLE1BQVdJLEVBQUVKLEdBQUYsQ0FBL0MsQ0FBSixFQUE0RDtBQUMxRCxhQUFPLEtBQVA7QUFDRDtBQUNGO0FBQ0QsT0FBSyxJQUFNQSxLQUFYLElBQWtCSSxDQUFsQixFQUFxQjtBQUNuQixRQUFJLEVBQUVKLFNBQU9LLE1BQVQsS0FBcUIsRUFBRUwsU0FBT0csQ0FBVCxDQUF6QixFQUF1QztBQUNyQyxhQUFPLEtBQVA7QUFDRDtBQUNGO0FBQ0QsU0FBTyxJQUFQO0FBQ0QiLCJmaWxlIjoiY29tcGFyZS1vYmplY3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nIGZhbHNlXG4gKiB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHQub2xkUHJvcHMgLSBvYmplY3Qgd2l0aCBvbGQga2V5L3ZhbHVlIHBhaXJzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0Lm5ld1Byb3BzIC0gb2JqZWN0IHdpdGggbmV3IGtleS92YWx1ZSBwYWlyc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdC5pZ25vcmVQcm9wcz17fSAtIG9iamVjdCwga2V5cyB0aGF0IHNob3VsZCBub3QgYmUgY29tcGFyZWRcbiAqIEByZXR1cm5zIHtudWxsfFN0cmluZ30gLSBudWxsIHdoZW4gdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqICAgaWYgdW5lcXVhbCwgcmV0dXJucyBhIHN0cmluZyBleHBsYWluaW5nIHdoYXQgY2hhbmdlZC5cbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbWF4LXN0YXRlbWVudHMsIGNvbXBsZXhpdHkgKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlUHJvcHMoe29sZFByb3BzLCBuZXdQcm9wcywgaWdub3JlUHJvcHMgPSB7fX0gPSB7fSkge1xuICBhc3NlcnQob2xkUHJvcHMgIT09IHVuZGVmaW5lZCAmJiBuZXdQcm9wcyAhPT0gdW5kZWZpbmVkLCAnY29tcGFyZVByb3BzIGFyZ3MnKTtcblxuICBpZiAob2xkUHJvcHMgPT09IG5ld1Byb3BzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAodHlwZW9mIG9sZFByb3BzICE9PSAnb2JqZWN0JyB8fCBvbGRQcm9wcyA9PT0gbnVsbCkge1xuICAgIHJldHVybiAnb2xkIHByb3BzIGlzIG5vdCBhbiBvYmplY3QnO1xuICB9XG4gIGlmICh0eXBlb2YgbmV3UHJvcHMgIT09ICdvYmplY3QnIHx8IG5ld1Byb3BzID09PSBudWxsKSB7XG4gICAgcmV0dXJuICduZXcgcHJvcHMgaXMgbm90IGFuIG9iamVjdCc7XG4gIH1cblxuICAvLyBUZXN0IGlmIG5ldyBwcm9wcyBkaWZmZXJlbnQgZnJvbSBvbGQgcHJvcHNcbiAgZm9yIChjb25zdCBrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICBpZiAoIShrZXkgaW4gaWdub3JlUHJvcHMpKSB7XG4gICAgICBpZiAoIW5ld1Byb3BzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGBwcm9wICR7a2V5fSBkcm9wcGVkOiAke29sZFByb3BzW2tleV19IC0+ICh1bmRlZmluZWQpYDtcbiAgICAgIH0gZWxzZSBpZiAob2xkUHJvcHNba2V5XSAhPT0gbmV3UHJvcHNba2V5XSkge1xuICAgICAgICByZXR1cm4gYHByb3AgJHtrZXl9IGNoYW5nZWQ6ICR7b2xkUHJvcHNba2V5XX0gLT4gJHtuZXdQcm9wc1trZXldfWA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gVGVzdCBpZiBhbnkgbmV3IHByb3BzIGhhdmUgYmVlbiBhZGRlZFxuICBmb3IgKGNvbnN0IGtleSBpbiBuZXdQcm9wcykge1xuICAgIGlmICghKGtleSBpbiBpZ25vcmVQcm9wcykpIHtcbiAgICAgIGlmICghb2xkUHJvcHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICByZXR1cm4gYHByb3AgJHtrZXl9IGFkZGVkOiAodW5kZWZpbmVkKSAtPiAke25ld1Byb3BzW2tleV19YDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qIGVzbGludC1lbmFibGUgbWF4LXN0YXRlbWVudHMsIGNvbXBsZXhpdHkgKi9cblxuLy8gU2hhbGxvdyBjb21wYXJlXG4vKiBlc2xpbnQtZGlzYWJsZSBjb21wbGV4aXR5ICovXG5leHBvcnQgZnVuY3Rpb24gYXJlRXF1YWxTaGFsbG93KGEsIGIsIHtpZ25vcmUgPSB7fX0gPSB7fSkge1xuXG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgIT09ICdvYmplY3QnIHx8IGEgPT09IG51bGwgfHxcbiAgICB0eXBlb2YgYiAhPT0gJ29iamVjdCcgfHwgYiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhhKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IGluIGEpIHtcbiAgICBpZiAoIShrZXkgaW4gaWdub3JlKSAmJiAoIShrZXkgaW4gYikgfHwgYVtrZXldICE9PSBiW2tleV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3Qga2V5IGluIGIpIHtcbiAgICBpZiAoIShrZXkgaW4gaWdub3JlKSAmJiAoIShrZXkgaW4gYSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuIl19